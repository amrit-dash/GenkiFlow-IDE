
import type { FileSystemNode } from './types';

export const mockFileSystem: FileSystemNode[] = [
  { 
    id: 'src', 
    name: 'src', 
    type: 'folder', 
    path: '/src',
    children: [
      { 
        id: 'src-components', 
        name: 'components', 
        type: 'folder', 
        path: '/src/components',
        children: [
          { id: 'src-components-button', name: 'button.tsx', type: 'file', path: '/src/components/button.tsx', content: 
`import React from 'react';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary';
}

export default function Button({ children, variant = 'primary', ...props }: ButtonProps) {
  const baseStyle = "px-4 py-2 rounded font-semibold";
  const variantStyle = variant === 'primary' 
    ? "bg-primary text-primary-foreground" 
    : "bg-secondary text-secondary-foreground";
  return (
    <button className={\`\${baseStyle} \${variantStyle}\`} {...props}>
      {children}
    </button>
  );
}` 
          },
          { id: 'src-components-input', name: 'input.tsx', type: 'file', path: '/src/components/input.tsx', content: 
`import React from 'react';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}

export default function Input(props: InputProps) {
  return (
    <input className="px-3 py-2 border border-input rounded bg-background text-foreground" {...props} />
  );
}` 
          },
        ]
      },
      { 
        id: 'src-app', 
        name: 'app', 
        type: 'folder', 
        path: '/src/app',
        children: [
          { id: 'src-app-page', name: 'page.tsx', type: 'file', path: '/src/app/page.tsx', content: 
`export default function HomePage() {
  return (
    <main className="p-6">
      <h1 className="text-2xl font-headline">Welcome to the App</h1>
      <p className="mt-2 text-foreground/80">This is the main page content.</p>
    </main>
  );
}` 
          },
          { id: 'src-app-layout', name: 'layout.tsx', type: 'file', path: '/src/app/layout.tsx', content: 
`import './globals.css';

export const metadata = {
  title: 'My Awesome App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}`
          },
        ]
      },
      { id: 'src-index', name: 'index.ts', type: 'file', path: '/src/index.ts', content: '// Main entry point for the src directory\nconsole.log("App starting");' }
    ]
  },
  { 
    id: 'public',
    name: 'public',
    type: 'folder',
    path: '/public',
    children: [
      { id: 'public-favicon', name: 'favicon.ico', type: 'file', path: '/public/favicon.ico', content: 'dummy ico content' },
      { id: 'public-image', name: 'logo.png', type: 'file', path: '/public/logo.png', content: 'dummy png content' },
    ]
  },
  { id: 'package-json', name: 'package.json', type: 'file', path: '/package.json', content: 
`{
  "name": "genkiflow-ide",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@types/node": "20.0.0",
    "@types/react": "18.2.0",
    "@types/react-dom": "18.2.0",
    "typescript": "5.0.0"
  }
}`
  },
  { id: 'readme-md', name: 'README.md', type: 'file', path: '/README.md', content: 
`# GenkiFlow IDE

This is an AI-powered IDE for developing and managing Genkit flows.

## Features

- Multi-file support
- AI Code Assistant
- Interactive UI
- File System Tools
- Codebase Search
- RAG Integration

Built with Next.js and Genkit.` 
  }
];
